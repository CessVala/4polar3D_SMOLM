% =========================================================================
% Script Name: FIRST_4polar3D_Preprocess_parallel.m
%
% Description:
%   This script prepares the input image stacks for 4polar3D analysis. It:
%     - Selects the first stack of cells to be analyzed.
%     - Allows the user to draw ROIs corresponding to the four polarized projections 
%       (bottom left, bottom right, top left, top right).
%     - Loads the transformation file 'tformbeads' generated by 'Merge_tforms'.
%     - Applies the transformation matrices to each polarized projection.
%     - Corrects the distorted projections and reconstructs the corrected image stack.
%
% Instructions:
%   1. Run this script.
%   2. Multi-select the first TIFF stack(s) of the cells to be analyzed.
%   3. Draw four ROIs corresponding to the bottom left, bottom right, top left, and top right projections.
%   4. Select the 'tformbeads' file as input (the merged transformation matrices from previous steps).
%   5. The script will apply the transformations and save the corrected image stacks.
%
% Notes:
%   - This step can be performed for multiple stacks in batch mode.
%   - The script uses parallel processing to improve speed.
%   - Corrected images are saved in the 'images1Corrected' subfolder.
%   - The random filling avoids zero-value artifacts in empty regions.
%
% Authors:
%   Charitra S. Senthil Kumar - Institut Fresnel  
%   Miguel Sison              - Institut Fresnel  
%   Cesar Valades-Cruz        - Institute of Hydrobiology (IHB), CAS
%   Arturo Vesga
%
% Date: June 2025
% =========================================================================

%% This program corrects the mat files.
clear all
close all
clc

%% Select the first stack(s) of the cells to be analyzed
[FileName_dum, PathName, FilterIndex] = uigetfile('D:\4POLARSTORM\_RAW DATA\*.tif', 'MultiSelect', 'on');

if iscell(FileName_dum)
    num_selected = size(FileName_dum, 2);
else
    num_selected = 1;
    dummy = FileName_dum;
    clear FileName_dum
    FileName_dum{1} = dummy;
end

%% Select the first image for ROI selection
FileName = FileName_dum{1};
tiff_file = [PathName '\' FileName];
tiffInfo = imfinfo(tiff_file);
sizestack = numel(tiffInfo);
data1 = double(imread(tiff_file, 1));

h1 = figure(1);
imagesc(data1);
colormap('gray');
axis('image');
contrasth = imcontrast(h1);

h = imrect;
msgbox('Select the first rectangle (Left-Bottom)', 'Hi', 'modal');
verticesleft = wait(h);
BWl = createMask(h);
rectveL = round(getPosition(h));

msgbox('Select the second rectangle (Right-Bottom)', 'Hi', 'modal');
verticesright = wait(h);
BWr = createMask(h);
rectveR = round(getPosition(h));

msgbox('Select the third rectangle (Left-Top)', 'Hi', 'modal');
verticesleftup = wait(h);
BWlu = createMask(h);
rectveLU = round(getPosition(h));

msgbox('Select the fourth rectangle (Right-Top)', 'Hi', 'modal');
verticesrightup = wait(h);
BWru = createMask(h);
rectveRU = round(getPosition(h));

close all;

%% Load the transformation file
uiopen([PathName 'tformbeads']);

%% Process each selected image stack
for k_index = 1:num_selected

    FileName = FileName_dum{k_index};

    % Create folders to save the processed .mat files
    foldermat = [PathName '\' FileName(1:end-4) '\images1\'];
    mkdir(foldermat);
    tiff_file = [PathName '\' FileName];

    % Prepare file listing
    data = zeros([size(double(imread(tiff_file, 1))) 100]);
    listening0 = dir([PathName '\' FileName]);
    listening = dir([PathName '\' FileName(1:end-4) '_X*.tif']);
    listening = [listening0; listening];
    mat = struct2cell(listening);

    sizestack = [];
    nametiff = struct();
    matrixindex = [];
    matrixindex2 = [];

    stringss=char(mat(1,1));
    str=(1:size(mat,2));

    for i = 1:size(mat, 2)
        if i == 1
            tiff_file=[PathName '\' stringss];
        else
            tiff_file=[PathName '\' stringss(1:end-4) '_X' num2str(str(i)) '.tif'];
        end

        tiffInfo = imfinfo(tiff_file);
        sizestack(i) = numel(tiffInfo);
        nametiff(i).name = tiff_file;
        matrixindex = [matrixindex 1:sizestack(i)];
        matrixindex2 = [matrixindex2 i * ones(1, sizestack(i))];
    end

    sizestack = [1 cumsum(sizestack(2:end)) + 1];

    img = imread(nametiff(1).name, matrixindex(1));

    tic
    n = floor(size(matrixindex, 2) / 100);
    delete(gcp('nocreate'));
    parpool('Processes')

    parfor i = 1:n
        name_savefile = [foldermat 'Image_' num2str(i * 100 - 99) '.mat'];
        data = zeros(size(img, 1), size(img, 2), 100);

        for ii = 0:99
            data(:, :, ii + 1) = double(imread(nametiff(matrixindex2(i * 100 - 99 + ii)).name, matrixindex(i * 100 - 99 + ii)));
        end

        mySaveFcn(name_savefile, data);
    end
    toc
    delete(gcp('nocreate'));

    %% Prepare corrected images
    name_image = [PathName '\' FileName(1:end-4) '\images1\Image_'];
    mkdir([PathName '\' FileName(1:end-4) '\images1Corrected\']);
    numf = size(dir([PathName '\' FileName(1:end-4) '\images1\Image_*']), 1) * 100;
    num1 = 1;

    tiff_file=[PathName '\' FileName];
    
    disp(['Analysis of ' tiff_file])
        
    tiffInfo=imfinfo(tiff_file);
    sizestack = numel(tiffInfo);   
    data1=double(imread(tiff_file,1));

    close all;
    delete(gcp('nocreate'));
    parpool('Processes')

    parfor numpf = num1:numf / 100
        num = (numpf - 1) * 100 + 1;

        filename = strcat(name_image, num2str(num));
        structdata = load(filename, 'data');
        data1 = structdata.data;

        BW2l = repmat(BWl, [1, 1, size(data1, 3)]);
        data1sel = data1 .* BW2l;

        BW2r = repmat(BWr, [1, 1, size(data1, 3)]);
        data2sel = data1 .* BW2r;

        BW2lu = repmat(BWlu, [1, 1, size(data1, 3)]);
        data3sel = data1 .* BW2lu;

        BW2ru = repmat(BWru, [1, 1, size(data1, 3)]);
        data4sel = data1 .* BW2ru;

        data1selcrop = data1sel(rectveL(2):(rectveL(2)+rectveL(4)), rectveL(1):(rectveL(1)+rectveL(3)), :);
        data2selcrop = data2sel(rectveR(2):(rectveR(2)+rectveR(4)), rectveR(1):(rectveR(1)+rectveR(3)), :);
        data3selcrop = data3sel(rectveLU(2):(rectveLU(2)+rectveLU(4)), rectveLU(1):(rectveLU(1)+rectveLU(3)), :);
        data4selcrop = data4sel(rectveRU(2):(rectveRU(2)+rectveRU(4)), rectveRU(1):(rectveRU(1)+rectveRU(3)), :);

        maxM = max([size(data1selcrop, 1), size(data2selcrop, 1), size(data3selcrop, 1), size(data4selcrop, 1)]);
        maxN = max([size(data1selcrop, 2), size(data2selcrop, 2), size(data3selcrop, 2), size(data4selcrop, 2)]);

        contourIm = 30;
        data1selcropnew = zeros(maxM + 2 * contourIm, maxN + 2 * contourIm, size(data1selcrop, 3));
        data2selcropnew = zeros(maxM + 2 * contourIm, maxN + 2 * contourIm, size(data1selcrop, 3));
        data3selcropnew = zeros(maxM + 2 * contourIm, maxN + 2 * contourIm, size(data1selcrop, 3));
        data4selcropnew = zeros(maxM + 2 * contourIm, maxN + 2 * contourIm, size(data1selcrop, 3));

        data1selcrop = imtranslate(data1selcrop, [contourIm, contourIm], 'OutputView', 'full');
        data1selcropnew(1:size(data1selcrop, 1), 1:size(data1selcrop, 2), :) = data1selcrop;

        data2selcrop = imtranslate(data2selcrop, [contourIm, contourIm], 'OutputView', 'full');
        data2selcropnew(1:size(data2selcrop, 1), 1:size(data2selcrop, 2), :) = data2selcrop;

        data3selcrop = imtranslate(data3selcrop, [contourIm, contourIm], 'OutputView', 'full');
        data3selcropnew(1:size(data3selcrop, 1), 1:size(data3selcrop, 2), :) = data3selcrop;

        data4selcrop = imtranslate(data4selcrop, [contourIm, contourIm], 'OutputView', 'full');
        data4selcropnew(1:size(data4selcrop, 1), 1:size(data4selcrop, 2), :) = data4selcrop;

        randmatrix = 100 .* rand(size(data1selcropnew)) + 500;
        data1selcropnew(data1selcropnew == 0) = randmatrix(data1selcropnew == 0);

        randmatrix = 100 .* rand(size(data2selcropnew)) + 500;
        data2selcropnew(data2selcropnew == 0) = randmatrix(data2selcropnew == 0);

        randmatrix = 100 .* rand(size(data3selcropnew)) + 500;
        data3selcropnew(data3selcropnew == 0) = randmatrix(data3selcropnew == 0);

        randmatrix = 100 .* rand(size(data4selcropnew)) + 500;
        data4selcropnew(data4selcropnew == 0) = randmatrix(data4selcropnew == 0);

        movingRegistered1 = imwarp(data1selcropnew, tform_4_1, 'OutputView', imref2d(size(data1selcropnew)));
        movingRegistered2 = imwarp(data2selcropnew, tform_4_2, 'OutputView', imref2d(size(data2selcropnew)));
        movingRegistered3 = imwarp(data3selcropnew, tform_4_3, 'OutputView', imref2d(size(data3selcropnew)));

        data1 = [movingRegistered3 data4selcropnew; movingRegistered1 movingRegistered2];

        randmatrix = 100 .* rand(size(data1)) + 500;
        data1(data1 == 0) = randmatrix(data1 == 0);

        name_savefile = strcat([PathName '\' FileName(1:end-4) '\images1Corrected\Image_'], num2str(num));
        mySaveFcn(name_savefile, data1);
    end
    delete(gcp('nocreate'));
end

PathName
FileName
clear all
