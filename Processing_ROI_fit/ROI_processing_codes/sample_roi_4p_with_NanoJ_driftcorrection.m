% =========================================================================
% Script Name: sample_roi_4p_with_NanoJ_driftcorrection.m
%
% Description:
%   This script performs ROI selection, visualization, and NanoJ drift correction
%   for 4polar3D datasets using previously estimated K-matrix and localization data.
%
%   The script:
%     - Loads calibration files, localization results, and composite 4P images.
%     - Applies drift correction based on NanoJ drift correction output.
%     - Creates interactive ROI selection figures.
%     - Saves selected ROIs and their corresponding data.
%     - Displays all created ROIs.
%     - Saves ROI data in Excel format.
%     - Generates stick plots using drift-corrected positions for selected ROIs.
%
% Instructions:
%   - Run this script and follow prompts to select input files and save directories.
%   - Freehand ROIs can be drawn interactively.
%
% Notes:
%   - The drift correction is based on a CSV file generated by NanoJ drift correction.
%
% Authors:
%   Charitra S. Senthil Kumar - Institut Fresnel
%   Cesar Valades-Cruz - Institute of Hydrobiology (IHB), CAS
%
% Date: June 2025
% =========================================================================

%% Initialization
clear all
clc

px_size = 0.130; % Pixel size in micrometers
count2ph = 0.24 / 0.775; % Conversion factor from camera counts to photon counts

% Load K-matrix
load('C:\Users\MOSAIC STORM 5\Documents\Temporary Directory for Processing\Charitra\20230214_Calibration\K_matrix.mat', 'K_res')
K = K_res(:, :, 1000);

% Calculate 4P parameters using the ISO model
data = calc_4P_Polar_params_ISO('C:\Users\MOSAIC STORM 5\Documents\Temporary Directory for Processing\Charitra\All podosomes\c2\c2_28_r_1.3_W_11_in_4x4_New.mat', K);

% Load 4P fitted data from fit_4P_ISOmodel
load('C:\Users\MOSAIC STORM 5\Documents\Temporary Directory for Processing\Charitra\All podosomes\c2\cell_2_fit_results.mat');
% fit_results.data = data;

% Load composite 4P orientation images
load('C:\Users\MOSAIC STORM 5\Documents\Temporary Directory for Processing\Charitra\All podosomes\c2\img_struct_workspace.mat');
img_struct.img_mask = ones(size(img_struct.img_strm(:, :, 1)));

% Load NanoJ drift correction table
% The CSV file should contain X and Y drift per frame (as exported by NanoJ)
uiopen('C:\Users\MOSAIC STORM 5\Documents\Temporary Directory for Processing\Charitra\All podosomes\c2\TS\C2_135_ALL_1000DriftTable.csv', 1);
Xdrift = C2135ALL1000DriftTable(:, 2);
Ydrift = C2135ALL1000DriftTable(:, 3);

% Prepare data structure for processing
data_struct.rho = fit_results.rho(:, 2);
data_struct.eta = fit_results.eta(:, 2);
data_struct.delta = fit_results.delta(:, 2);
data_struct.rmse = fit_results.rmse(:, 2);
data_struct.frame = data.T;
data_struct.y_loc = data.Y(:, 1) * px_size;
data_struct.x_loc = data.X(:, 1) * px_size;
data_struct.I_tot = data.It(:, 1) * count2ph;
data_struct.I = data.I(:, :);
data_struct.loc_precision = data.sigma(:, :);
data_struct.noise = data.noise(:, :);

% data_struct.y_loc           = ( data.Y(:, 1) + Ydrift(data.T(:,1)) )*px_size;      % x and y coordinates in real world measurements (micrometer)
% data_struct.x_loc           = ( data.X(:, 1) + Xdrift(data.T(:,1)) )*px_size;

% Apply NanoJ drift correction to x and y positions
data_struct.x_loc_driftcorr = data.X(:, 1) + Xdrift(data.T(:, 1));
data_struct.y_loc_driftcorr = data.Y(:, 1) + Ydrift(data.T(:, 1));
data_struct % Display data structure

%% Create interactive figure for ROI selection
[roi_struct, ax_i, ax_r, ax_e, ax_d, ax_m, t_layout] = gen_fig_4P_roi_select(img_struct);

% Create new save file and save data used for processing/roi generation
[fname, fpath] = uiputfile('*.mat');
time_temp = char(datetime('now', 'Format', 'yyyy-MM-dd_HH-mm-ss'));
save_file_name = fullfile(fpath, [time_temp '_' fname]);
save(save_file_name, "img_struct", "roi_struct", "data_struct", "-v7.3");

%% ROI Selection
roi_struct = roi_select_4P(roi_struct, ax_i, ax_r, ax_e, ax_d, ax_m);
temp = size(roi_struct.list_form, 2);
roi_data(temp) = roi_get_4Pdata(temp - 1, data_struct, roi_struct.list_form);

save(save_file_name, "roi_struct", "roi_data", "-append");
disp(['You currently have ' num2str(size(roi_struct.list_form, 2) - 1) ' user defined ROI...'])

%% Display all selected ROIs
figure;
tiledlayout('flow')

% Display STORM image
nexttile
imagesc(img_struct.img_strm(:, :, 2));
axis image; set(gca, 'YDir', 'normal')
set(gca, 'Colormap', gray)
clim(prctile(img_struct.img_strm(:, :, 2), [0 99.975], 'all'))
title('STORM image')

% Display all ROI masks
nexttile
temp_im = imagesc(sum(roi_struct.mask_form(:, :, 2:end) .* reshape(1:(size(roi_struct.mask_form, 3) - 1), 1, 1, []), 3));
axis image
set(gca, 'YDir', 'normal')
for k = 2:size(roi_struct.mask_form, 3)
    [row, col] = find(roi_struct.mask_form(:, :, k));
    text(max(col) + 2, mean(unique(row)), num2str(k - 1), 'FontSize', 14, 'Color', [1 1 0] * 0.9)
end
set(gca, 'Colormap', jet)

% Display each ROI individually
for k = 2:size(roi_struct.mask_form, 3)
    nexttile
    temp_im = imagesc(min(img_struct.img_strm(:, :, 2), prctile(img_struct.img_strm(:, :, 2), 99.99, 'all')));	% use STORM image as background
    %     temp_im = imagesc(min(imgFluo, prctile(imgFluo(:),99.99))); % use fluoresence image as background
    temp_im.AlphaData = (~roi_struct.mask_form(:, :, k)) + roi_struct.mask_form(:, :, k) * 0.55;
    set(gca, 'Color', [1 1 0] .* 0.9);
    axis image; set(gca, 'YDir', 'normal');
    title(['ROI ' num2str(k - 1)]);
    set(gca, 'Colormap', gray)
end

%% Save ROI data to Excel
save_roi_data(roi_data)

%% Drift Correction Visualization and Stick Plots
rho = data_struct.rho;
eta = data_struct.eta;
delta = data_struct.delta;

imgStrm = img_struct.img_strm(:, :, 2);
x_bin = img_struct.x_bin;
y_bin = img_struct.y_bin;

x_loc   = img_struct.x_loc;
y_loc   = img_struct.y_loc;


% Use NanoJ drift correction for final stick plot positions
x_loc_driftcorr = img_struct.x_loc + Xdrift(data.T(:, 1)) * px_size;
y_loc_driftcorr = img_struct.y_loc + Ydrift(data.T(:, 1)) * px_size;

% roi_num = 2;
% roi_list = roi_struct.list_form(:,roi_num+1);
% % Make sticks figures
% sl = 0.05;           % length of sticks (microns)
% sw = 0.01*0.1;      % width of sticks (microns)
% sa = 0.7;           % opacity of sticks 0-1
%
% %%%% Sticks image with Rho as colormap
% %rho
%
% c_line = rad2deg(rho);      % assign colors to be based on Rho
%
% fig_r = figure('Position',[50 50 940 700],'Resize','off');
% [ax_img_r, ax_stk_r, fig_r] = create_single_4Psticks_image(fig_r, imgStrm,  x_bin, y_bin,...
%     x_loc(roi_list),...
%     y_loc(roi_list),...
%     rho(roi_list),...
%     c_line(roi_list), sl, sw, sa);
%
% colormap(ax_stk_r,"hsv");   % set colormap as HSV
% ax_stk_r.CLim = [0 180];    % set range of colors (here it is 0-180) because Rho goes from 0 to 180 degrees
%
% title('\rho')
%
%
% %eta
%
% c_line = rad2deg(eta);      % assign colors to be based on eta
%
% fig_e = figure('Position',[50 50 940 700],'Resize','off');
% [ax_img_r, ax_stk_r, fig_e] = create_single_4Psticks_image(fig_e, imgStrm,  x_bin, y_bin,...
%     x_loc(roi_list),...
%     y_loc(roi_list),...
%     rho(roi_list),...
%     c_line(roi_list), sl, sw, sa);
%
% colormap(ax_stk_r,"plasma");   % set colormap as plasma
% ax_stk_r.CLim = [0 90];    % set range of colors (here it is 0-90) because eta goes from 0 to 90 degrees
%
% title('\eta')
%
% %delta
%
% c_line = rad2deg(delta);      % assign colors to be based on delta
%
% fig_d = figure('Position',[50 50 940 700],'Resize','off');
% [ax_img_r, ax_stk_r, fig_d] = create_single_4Psticks_image(fig_d, imgStrm,  x_bin, y_bin,...
%     x_loc(roi_list),...
%     y_loc(roi_list),...
%     rho(roi_list),...
%     c_line(roi_list), sl, sw, sa);
%
% colormap(ax_stk_r,"jet");   % set colormap as plasma
% ax_stk_r.CLim = [0 180];    % set range of colors (here it is 0-180) because delta goes from 0 to 180 degrees
%
% title('\delta')
%
% %%histograms for ROI
%
% figure;
% t_layout = tiledlayout(2,2);
% nexttile;
% histogram(rad2deg(rho(roi_list)),'BinLimits', [0, 180]); title('\rho')
% nexttile;
% histogram(rad2deg(eta(roi_list)),'BinLimits', [0, 90]); title('\eta')
% nexttile;
% histogram(rad2deg(delta(roi_list)),'BinLimits', [0, 180]); title('\delta')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Edited on 14/03/2023 to show one or more than one ROI simultaneously


roi_num = [1:3];
sl = 0.01;           % Stick length (microns)
sw = 0.01 * 0.1;     % Stick width (microns)
sa = 0.7;            % Stick opacity

flag = numel(roi_num);

if flag == 1

    roi_list = roi_struct.list_form(:, roi_num + 1);
    % Make sticks figures

    %%%% Sticks image with Rho as colormap
    % Time (frame) stick plot
    c_line = data_struct.frame;		% assign colors to be based on frame number
    fig_t = figure('Position', [50 50 940 700], 'Resize', 'off');
    [ax_img_r, ax_stk_r, fig_t] = create_single_4Psticks_image(fig_t, imgStrm, x_bin, y_bin, ...
        x_loc_driftcorr(roi_list), y_loc_driftcorr(roi_list), rho(roi_list), c_line(roi_list), sl, sw, sa);
    colormap(ax_stk_r, "hsv");
    ax_stk_r.CLim = [0 20000];		% max number of frames
    title('frames')

    % Rho stick plot
    c_line = rad2deg(rho);		 % assign colors to be based on Rho
    fig_r = figure('Position', [50 50 940 700], 'Resize', 'off');
    [ax_img_r, ax_stk_r, fig_r] = create_single_4Psticks_image(fig_r, imgStrm, x_bin, y_bin, ...
        x_loc_driftcorr(roi_list), y_loc_driftcorr(roi_list), rho(roi_list), c_line(roi_list), sl, sw, sa);
    colormap(ax_stk_r, "hsv");
    ax_stk_r.CLim = [0 180];		% set range of colors (here it is 0-180) because Rho goes from 0 to 180 degrees
    title('\rho')

    % Eta stick plot
    c_line = rad2deg(eta);		% assign colors to be based on eta
    fig_e = figure('Position', [50 50 940 700], 'Resize', 'off');
    [ax_img_r, ax_stk_r, fig_e] = create_single_4Psticks_image(fig_e, imgStrm, x_bin, y_bin, ...
        x_loc_driftcorr(roi_list), y_loc_driftcorr(roi_list), rho(roi_list), c_line(roi_list), sl, sw, sa);
    colormap(ax_stk_r, "plasma");
    ax_stk_r.CLim = [0 90];				% set range of colors (here it is 0-90) because eta goes from 0 to 90 degrees
    title('\eta')

    % Delta stick plot
    c_line = rad2deg(delta);			% assign colors to be based on delta
    fig_d = figure('Position', [50 50 940 700], 'Resize', 'off');
    [ax_img_r, ax_stk_r, fig_d] = create_single_4Psticks_image(fig_d, imgStrm, x_bin, y_bin, ...
        x_loc_driftcorr(roi_list), y_loc_driftcorr(roi_list), rho(roi_list), c_line(roi_list), sl, sw, sa);
    colormap(ax_stk_r, "jet");
    ax_stk_r.CLim = [0 180];			% set range of colors (here it is 0-180) because delta goes from 0 to 180 degrees
    title('\delta')

    % Histograms for ROI
    figure;
    t_layout = tiledlayout(2, 2);
    nexttile;
    histogram(rad2deg(rho(roi_list)), 'BinLimits', [0, 180]); title('\rho')
    nexttile;
    histogram(rad2deg(eta(roi_list)), 'BinLimits', [0, 90]); title('\eta')
    nexttile;
    histogram(rad2deg(delta(roi_list)), 'BinLimits', [0, 180]); title('\delta')

else
    roi_list = zeros(numel(x_loc), 1);
    for ij = 1:numel(roi_num)
        temp_roi_list = roi_struct.list_form(:, roi_num(ij) + 1);
        roi_list = or(roi_list, temp_roi_list);
    end

    % Time (frame) stick plot
    c_line = data_struct.frame;			% assign colors to be based on frame number

    fig_t = figure('Position', [50 50 940 700], 'Resize', 'off');
    [ax_img_r, ax_stk_r, fig_t] = create_single_4Psticks_image(fig_t, imgStrm, x_bin, y_bin, ...
        x_loc_driftcorr(roi_list), y_loc_driftcorr(roi_list), rho(roi_list), c_line(roi_list), sl, sw, sa);
    colormap(ax_stk_r, "turbo");
    ax_stk_r.CLim = [0 20000];			% max number of frames
    title('frames')

    % Rho stick plot
    c_line = rad2deg(rho);		% assign colors to be based on Rho
    fig_r = figure('Position', [50 50 940 700], 'Resize', 'off');
    [ax_img_r, ax_stk_r, fig_r] = create_single_4Psticks_image(fig_r, imgStrm, x_bin, y_bin, ...
        x_loc_driftcorr(roi_list), y_loc_driftcorr(roi_list), rho(roi_list), c_line(roi_list), sl, sw, sa);
    colormap(ax_stk_r, "hsv");
    ax_stk_r.CLim = [0 180];		% set range of colors (here it is 0-180) because Rho goes from 0 to 180 degrees
    title('\rho')

    % Eta stick plot
    c_line = rad2deg(eta);			% assign colors to be based on eta
    fig_e = figure('Position', [50 50 940 700], 'Resize', 'off');
    [ax_img_e, ax_stk_e, fig_e] = create_single_4Psticks_image(fig_e, imgStrm, x_bin, y_bin, ...
        x_loc_driftcorr(roi_list), y_loc_driftcorr(roi_list), rho(roi_list), c_line(roi_list), sl, sw, sa);
    colormap(ax_stk_e, "plasma");
    ax_stk_e.CLim = [0 90];			% set range of colors (here it is 0-90) because eta goes from 0 to 90 degrees
    title('\eta')

    % Delta stick plot
    c_line = rad2deg(delta);			% assign colors to be based on delta
    fig_d = figure('Position', [50 50 940 700], 'Resize', 'off');
    [ax_img_d, ax_stk_d, fig_d] = create_single_4Psticks_image(fig_d, imgStrm, x_bin, y_bin, ...
        x_loc_driftcorr(roi_list), y_loc_driftcorr(roi_list), rho(roi_list), c_line(roi_list), sl, sw, sa);
    colormap(ax_stk_d, "jet");
    ax_stk_d.CLim = [0 180];		% set range of colors (here it is 0-180) because delta goes from 0 to 180 degrees

    title('\delta')

    % Link all axes
    linkaxes([ax_stk_r ax_img_r ax_stk_e ax_img_e ax_stk_d ax_img_d], 'xy');

    % Histograms
    figure;
    t_layout = tiledlayout(2, 2);
    nexttile;
    histogram(rad2deg(rho(roi_list)), 'BinLimits', [0, 180]); title('\rho')
    nexttile;
    histogram(rad2deg(eta(roi_list)), 'BinLimits', [0, 90]); title('\eta')
    nexttile;
    histogram(rad2deg(delta(roi_list)), 'BinLimits', [0, 180]); title('\delta')

end
